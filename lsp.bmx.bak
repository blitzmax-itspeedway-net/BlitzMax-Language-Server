SuperStrict

'   LANGUAGE SERVER EXTENSION FOR BLITZMAX NG
'   (c) Copyright Si Dunford, June 2021, All Right Reserved
'   VERSION 0.00 PA

Framework brl.standardio 
Import pub.freeprocess
Import brl.stringbuilder
Import brl.retro

Import brl.collections      ' Used for Tokeniser
Import brl.map              ' Used as JSON dictionary
Import brl.reflection		' USed by JSON.transpose
'Import brl.retro
'Import brl.linkedlist

Include "bin/TLogger.bmx"
Include "bin/json.bmx"

' MESSAGE TYPES

Include "bin/REQ_initialize.bmx"
Include "bin/REQ_shutdown.bmx"

Global Version:String = "0.00 Pre-Alpha"
Global Logfile:TLogger = New TLogger()

Type Main
    Global instance:Main

    Field exitcode:Int = 0
    Field quit:Int = False      ' When to quit

	Field initialised:Int = False
	
    Method New()
        DebugLog( "# BlitzMax LSP" )
        DebugLog( "# V"+Version )
        'Log.write( "Initialised")
        ' Set up exit function
        instance = Self
        OnEnd( Main.OnEnd )        
    End Method

    Method run:Int()
        'Local stdIN:TStream
        Local line:String   ', char:String
        Local content:String
        Local contentlength:Int
		Local contenttype:String = "utf-8"
        Local fsm:Int = 0
Local counter:Int = 0
        Local stdIN:TStream = ReadStream( StandardIOStream )
        If stdIN
            Repeat


                line = stdIN.ReadLine()
                'print( "BYTES: "+len(line))
                '    if line="" exit
                'print "STREAMSIZE: "+StreamSize(stdIN)
                'print "STREAMPOS: "+StreamPos(stdIN)
                'print "EOF:"+eof(stdIn)
                'select fsm
                'case 0  ' Read Headers
                If line.startswith("Content-Length:")
                    contentlength = Int( line[15..] )
                    Log.write( "HEADER: Content-Length:"+contentlength)
                ElseIf line.startswith("Content-Type:")
                    contenttype = Int( line[13..] )
					' Backward compatibility, utf8 is no longer supported
					If contenttype = "utf8" contenttype = "utf-8"
                    Log.write( "HEADER: Content-Type:"+contenttype)
                ElseIf line=""
                    Log.write( "IGNORE BLANK")
                    content = stdIN.ReadString$( contentlength )
                    Log.write( "RECEIVED:~n"+content )

                    ' Start a thread to process content
                    'local thread:TThread = CreateThread( OnMessage, content )
                    OnMessage( content )
                Else
                    Log.write( "SKIP:"+line)
                End If
                'end select
                'Input$( "#" )

            Until quit  'len(line)=0 or eof(stdIn)
Rem
            print "STDIN OPEN"
            repeat 
                print( "Waiting for input" )
                ' ## BLOCKING CALL ##
                line = stdIN.ReadLine()
                print "FINISHED READING LINE"
                select fsm
                case 0  ' Waiting for Content-Length
                    print( "WAITING FOR CONTENT-LENGTH")
                    if line.StartsWith( "Content-Length:" )
                        contentlength = int( line[15..] )
                        print( "LENGTH:"+contentlength )
                        fsm = 1
                    Else
                        print( "SKIP: "+line)
                    end if
                case 1  ' Waiting for Header to complete (Blank Line)
                    print( "WAITING FOR HEADER")
                    line = stdIN.ReadLine()
                    if trim(line)=""
                        print( "Header complete")
                        content = stdIN.ReadString$( contentlength )
                        print "RECEIVED:~n"+content
                        fsm = 0
                    Else
                        print( "SKIP: "+line)
                    end if
                Default
                    print "..."
                End Select
                    ' Ignore everything else until start of JSON
'                    local ignored:string
 '                   Repeat
  '                      char = stdIN.ReadString(1)
   '                     ignored :+ char
    '                until char="{"
     '               print "IGNORED: "+ignored

                    'char :+ 
                'else just ignore line
                'End If
                'Local input:string = ReadLine( stdIN )
                'print( input )
                counter :+ 1
                if counter>5 end
            Until quit 'or counter > 5
end Rem
        Else
            Print "Failed to open StdIN"
        End If
            
        

        ' Clean up and exit gracefully
		Logfile.Close()
        Return exitcode
    End Method
    
    Method Close()
    End Method

    ' Parse a request
    Function OnMessage( message:String )
		' Parse message into a JSON object
        Local j:JSON = json.parse( message )

		' Check if message is a Request:
		'	(Requests contain "method" key)
		Local methd:String = j["method"].tostring()
		If methd
			Local request:TRequest = j.transpose()
			If request request.execute()
		End If

    End Function

    Function OnEnd()
        Print( "Running exit function")
        instance.Close()
		Logfile.Close()
    End Function

End Type

' BASIC REQUEST TYPE
Type TRequest
    Field id:String	' Always "2.0"
    Method Execute() Abstract
End Type

Function StdIO_Read_Thread()
    'LockMutex( stdIO_read )
    'UnlockMutex( stdIO_read )
End Function

Function StdIO_Write_Thread()
    'LockMutex( stdIO_write )
    'UnlockMutex( stdIO_write )
End Function

'   Run the Application
Global LSP:Main = New Main()
exit_( LSP.run() )
